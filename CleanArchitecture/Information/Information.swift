//
//  Information.swift
//  CleanArchitecture
//
//  Created by 유성열 on 8/28/24.
//

// MARK: - 클린아키텍처(CleanArchitecture)
// MARK: 클린아키텍처를 경험하기 위한 프로젝트로 UseCase같은 경우는 간단한 앱 단위에서는 필요없는 경우가 대부분이지만 이 프로젝트는 주목적인 '클린아키텍처'설계 이므로 UseCase를 정의

/*
● 클린 아키텍처는 앱 전반적으로 구조화된 설계를 제공한다.
 - 유지보수성 증가
 - 확장성과 유연성
 - 재사용성
 - 테스트 용이
 -> (비대해지는)프로젝트를 만들고 유지보수하는 데 있어서 더 편리하기 위한 것이 주 목적이다.
 
 클린아키텍처는 소프트웨어 시스템을 여러 계층(레이어)으로 나누어 모듈화하는 구조, 각 계층은 특정 책임을 가지고, 다른 계층과 의존성을 최소화하며, 핵심 비즈니스 로직을 외부 프레임워크나 UI와 분리한다.
 
 ● 클린 아키텍처의 대원칙 ⭐️
    1. 의존성 규칙 :
        - 시스템의 각 계층 간의 의존성이 항상 "안쪽"으로만 향해야 한다. ('고수준'을 향해야 한다. 고수준 모듈이 저수준 모듈에 의존하지 않아야 하고 고수준 모듈의 변경이 저수준 모듈에 영향을 받지 않게 해야함)
            -> 고수준 : 애플리케이션의 비즈니스 로직과 핵심 기능을 담당(시스템의 본질적인 부분으로 변경이 적고 안정적이어야 함 - Domain 계층과 UseCase가 여기에 해당)
            -> 저수준 : 애플리케이션의 세부 구현과 외부 시스템과의 통신을 담당(시스템의 세부사항을 구성하며 변경이 자주 일어날 수 있음 - Data 계층과 Repository가 여기에 해당)
            
        - (다이어그램 이미지 참고) 안쪽에서 바깥쪽으로 의존하면 안되며 내부일수록 중요하고 변화가 없어야 한다.(내부 계층은 외부 계층의 존재를 전혀 몰라야 하고 외부 계층에서 내부 계층으로의 의존성은 존재할 수 없다.)
 
        - 외부 계층은 내부 계층의 인터페이스와 Entity를 사용해야 하며, 반대로 내부 계층은 외부 계층의 세부 사항에 대해 알 필요가 없다.
        
        * 즉 변경이 발생했을 때 외부 계층(UI, DB)의 변경이 내부 계층(비즈니스 로직, 유스케이스)에 영향을 미치지 않도록 설계하는 것
 
    2. 계층 분리(관심사의 분리) :
        각 계층은 독립적이고 특정 책임을 갖도록 한다.(특정한 '관심사'에 대해서만 책임져야 한다.) 그리고 의존성 규칙을 따른다.
        - Entities(Entity)
        - UseCases
        - Interface Adapters
        - Frameworks and Drivers
 
    3. 불변성과 독립성
        시스템의 각 계층이 다른 계층으로부터 독립적이어야 한다. 특히 내부 계층은 외부 계층에 의존하지 않아야 한다.
        - 불변성 : 특정 계층의 변경이 다른 계층에 영향을 주지 않도록 설계(예를 들어 UI 레이어를 변경해도 비즈니스 로직이 포함된 UseCases 레이어에는 영향을 주지 않아야 함)
        - 독립성 : 각 계층은서로 다른 환경(테스트 환경, 실제 환경)에서 독립적으로 테스트 가능해야 하고, 재사용이 가능해야 함(테스트 용이성과 코드 재사용성 극대화)
 
 

● 클린 아키텍처는 크게 4가지 레이어로 구성
 - Entity :
    비즈니스 규칙을 포함하고, 애플리케이션의 핵심 기능을 정의하는 계층(핵심 업무 규칙)
    비즈니스 룰을 캡슐화한 것(객체, 데이터 구조, 함수의 집합 등등)
    앱에서 가장 핵심적이고, 외부 환경이 바뀌어도 변경될 가능성이 가장 낮음
    영화 검색 앱이라면 '영화'라는 객체로 볼 수 있다.
    ---> (약간)Model의 개념으로 볼 수 있는데 Model은 Entity로 부터 앱에서 사용하고자 하는 모델로 변경한 것
        이 프로젝트에서는 실제 앱의 요구사항(앱에서 정말 필요로 하는 필드)을 정의하고 JSON 데이터를 파싱
 
 - UseCases :
    애플리케이션의 특정 작업이나 기능을 담당하는 계층(앱에 특화된 업무 규칙을 포함(비즈니스 로직을 담은 객체))
    애플리케이션 계층으로 애플리케이션에 해당하는 업무 규칙을 정의한 영역
    유스케이스 레이어의 변경사항은 저수준 정책에 영향을 받지 않아야 한다.
    시스템의 모든 사용 사례를 캡슐화하고 구현
    영화 검색 앱이라면 '영화를 검색한다', '영화 정보를 저장한다' 등 유저의 시나리오 들이 UseCase에 해당.
    (Entity의 핵심 규칙을 어떻게, 언제 호출할지 명시하는 것)
 
 - Interface Adapter :
    데이터가 외부로부터 들어오거나 나가는 인터페이스를 처리하는 계층(컨트롤러, 프레젠터, 게이트웨이 등으로 구성되는 영역) -> 유스케이스와 외부 시스템 간의 데이터를 변환하거나 연결하는 계층
    데이터가 Entity, UseCase에서 -> 데이터베이스, UI와 같은 외부프레임워크에 사용되기 쉬운 형태로 변환되는 곳(유스케이스와 외부 세계(데이터베이스, UI) 간의 변환 역할)
 
 - Frameworks and Drivers :
    (DB, UI 같은)외부 시스템과의 통신을 담당하는 계층(시스템 핵심 업무와는 상관없는 프레임워크 도구들로 구성 - 주로 Input, Output에 해당하는 컴포넌트들)
    (UIKit, SwiftUI와 같은 UI프레임워크나 Alamofire와 같은 외부 라이브러리를 포함)
 
 ● 버터플라이 아키텍처(클린아키텍처를 iOS에 맞게 구성한 내용)
    크게 3가지 레이어로 구성
    - Presentation :
        사용자 인터페이스(UI)와 관련된 모든 로직을 포함하는 계층(사용자가 시스템과 상호작용할 수 있도록 하는 모든 요소를 포함 - 사용자 입력을 받고, 이를 적절한 형식으로 처리하여 화면에 표시)
        사용자 인터페이스를 담당하며 사용자 입력을 받는다(ViewController, View, *ViewModel이 해당됨)
        *ViewModel은 Domain에 속할 수도 있다.(MVVM패턴에서는 Presentation)
                    
        책임 :
         - 사용자의 요청을 처리하고, 해당 요청을 도메인 계층에 전달
         - 도메인 계층으로부터 받은 데이터를 사용자에게 보여줄 수 있는 형식으로 변환
 
    - Domain :
        주요 기능과 비즈니스 규칙을 포함, 처리하는 계층(Usecase와 Entity 도메인 객체를 가짐)
        *ViewModel이 여기에 해당할 수도 있음
        * Domain Layer 계층은 시스템의 핵심 규칙과 유스케이스를 구현하며, 애플리케이션의 상태 관리와 비즈니스 규칙을 수행하는 책임을 진다. 시스템의 비즈니스 로직을 유지하는 순수한 코어(외부 프레임워크나 기술 스택에 의존하지 않음)
        
        책임 :
         - 시스템의 비즈니스 로직을 정의하고 실행
         - 외부로부터의 데이터 입출력을 처리하는 방식에 대한 구체적인 내용 없이 유스케이스와 비즈니스 규칙을 관리
 
    - Data :
        데이터를 실제로 저장하고, 불러오고, 외부 소스와 통신하는 역할 계층
        데이터 소스로(로컬 DB, 원격 API 등) 부터 데이터를 가져오고, 데이터를 Domain Layer에 전달하거나 저장한다.(API호출 등 데이터 통신과 데이터 소스를 추상화하여 데이터 접근을 위한 인터페이스 제공)
 
        책임 :
         - 데이터 저장, 조회, 업데이트, 삭제 작업을 수행
         - 네트워크 요청이나 로컬 데이터베이스 요청을 처리하고, 필요한 데이터를 도메인 계층에 제공하거나, 도메인 계층으로 부터 받은 데이터를 적절한 데이터 소스에 저장
 
 */
