//
//  MovieEntity.swift
//  CleanArchitecture
//
//  Created by 유성열 on 8/29/24.
//
// MARK: - 앱에서 가장 핵심이되는 Entity(가장 변하지 않는 중심이되는 객체)
// 애플리케이션의 핵심 비즈니스 규칙을 표현하는 객체가 된다.
/*
 ⭐️ Entity는 애플리케이션의 핵심 비즈니스 로직을 포함할 수 있다.
    Entity는 상태와 동작을 가지며 비즈니스 규칙에 의해 영향을 받는 속성과 메서드를 포함
    Entity는 도메인 고유의 규칙을 구현할 수 있음
        -> 예를 들어 계좌(Entity)가 잔액이라는 상태(속성)를 가지고 있고, 잔액을 변경하는 메서드(동작)를 가질 수 있다. (Entity에 포함되는 비즈니스 로직은 Entity의 책임과 직접적으로 관련된 것들로만 제한된다.)
        -> Entity 내부에서 자신의 상태를 유효하게 유지하는 데 필요한 규칙을 적용할 수 있는 것(기본적인 비즈니스 규칙 적용, 다른 객체와의 협업이나 시스템 외부의 변경 사항과는 관련이 없음)
    
    * 그렇다면 UseCase의 비즈니스 로직은? -> UseCase는 시스템 수준의 비즈니스 로직을 포함하는 것
        -> 예를 들어 "계좌 이체" UseCase는 출금 계좌와 입금 계좌(Entity)를 관리하고 두 Entity의 상태를 변경하는 비즈니스 로직을 포함하고 그 과정에서 발생할 수 있는 오류(잔액부족 등)에 대한 처리를 포함
        -> 로직이 시스템의 기능을 조정하고, 여러 Entity 간의 협업을 관리하거나 외부 시스템과의 상호작용을 포함하는 경우
    * 간단하게 '도메인 모델(Entity) 수준의 비즈니스 규칙'과 '응용 프로그램 수준(Use Case)의 비즈니스 규칙'으로 구분지을 수 있음
*/
/*
    Entity의 특징
        - 비즈니스 로직의 중심 : 애플리케이션의 핵심 비즈니스 로직을 포함함
        - 도메인 모델의 일부분 : 특정 도메인에 대한 개념을 나타내며, 도메인 모델의 일부로서 해당 도메인과 관련된 속성과 동작을 정의함(은행 애플리케이션에서는 'Account(계좌)'와 같은 Entity를 가지고 이 Entity는 계좌 번호, 잔액, 입금 및 출금 등의 메서드를 포함할 수 있음)
        - 독립적이고 재사용 가능 : 다른 계층(Data, Presentation)과 독립적으로 설계되어야 함(이를 통해 Entity는 애플리케이션의 다른 부분과 분리되고 재사용 가능)
        - 외부 시스템에 의존하지 않음 : Entity는 순수한 비즈니스 로직만을 포함하며, 외부 세계에 대한 지식이 없어야 함(외부 변경으로부터 강해짐)
        - 상태와 동작을 가짐 : 상태(속성)와 동작(메서드)를 가질 수 있음
        - 식별성 : 고유한 식별자(Identifier)를 가지고 있어야 함(동일한 데이터가 여러 번 나타날 수 있는 경우에도 Entity를 고유하게 식별할 수 있도록)('User' Entity는 'id' 속성을 통해 고유하게 식별 가능)
*/

import Foundation

struct MovieEntity {
    let id: Int
    let title: String
    let imageURL: String
    let uploadedDate: Date
}
